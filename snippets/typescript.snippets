snippet lv 'log a variable'
        console.log('***** ${1:var1}:', ${1:var1})

snippet lv2 'Log 2 variables'
        console.log('***** ${1:var1}:', ${1:var1}, '${2:var2}:', ${2:var2})

snippet lv3 'Log 3 variables'
        console.log('***** ${1:var1}:', ${1:var1}, '${2:var2}:', ${2:var2}, '${3:var3}:', ${3:var3})

snippet lv4 'Log 4 variables'
        console.log('***** ${1:var1}:', ${1:var1}, '${2:var2}:', ${2:var2}, '${3:var3}:', ${3:var3}, '${4:var4}:', ${4:var4})

snippet lvj 'Log a variable as pretty json'
        console.log('***** ${1:var1}:', JSON.stringify(${1:var1}, null, 2))

snippet log 'Log a message'
        console.log('***** $1')

snippet protoprops 'Log all properties including prototype'
        const logAllProperties = (obj: any) => {
          if (obj == null) return // recursive approach
          console.log(Object.getOwnPropertyNames(obj))
          logAllProperties(Object.getPrototypeOf(obj))
        }

snippet trycatch 'Try-Catch'
        try {
          $0
        } catch (error) {
          console.error(error)
        }

snippet tryfinally 'Try-Finally'
        try {
          $0
        } finally {
          console.error(error)
        }

snippet iife 'Immediately invoked function expression'
        (() => {
          $1
        })()

snippet iifa 'Immediately invoked async function expression'
        (async () => {
          $1
        })()

snippet iifs 'Immediately invoked function statement'
        ;(() => {
          $1
        })()

snippet reduce 'Array Reduce'
        $1.reduce((result, $2) => {
          $0
          return result
        }, ${3:{}})

snippet desc 'Jest describe'
        describe('${1:description}', () => {
          ${2}
        })

snippet it 'Jest it'
        it('${1:behavior}', async () => {
          ${2}
        })

snippet beforee 'Jest beforeEach'
        beforeEach(async () => {
          ${0}
        })

snippet script 'basic CLI script'
        export const run = async (): Promise<void> => {
          $0
        }

        void run().catch((error: unknown) => console.error(error))

